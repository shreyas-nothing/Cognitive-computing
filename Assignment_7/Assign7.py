# -*- coding: utf-8 -*-
"""assgn7.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/13qnCg-aewzd7aaUPOkaDINBNkFwa9UDC
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

# Part I: Randomized Sales Data Generation (NumPy)

# Use roll number as seed (replace with actual roll number)
roll_number = 123456  # Change this to your roll number
np.random.seed(roll_number)

# Generate sales data (12 months, 4 categories)
sales_data = np.random.randint(1000, 5001, size=(12, 4))

# Convert to DataFrame
months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']
categories = ['Electronics', 'Clothing', 'Home & Kitchen', 'Sports']
df = pd.DataFrame(sales_data, columns=categories, index=months)

# Display the first 5 rows and summary statistics
print("First 5 rows:")
print(df.head())
print("\nSummary statistics:")
print(df.describe())

# Part II: Data Manipulation and Analysis

# Total sales per category
total_sales_per_category = df.sum()
print("\nTotal Sales per Category:")
print(total_sales_per_category)

# Total sales per month
df['Total Sales'] = df.sum(axis=1)

# Average sales growth between consecutive months
df['Growth Rate'] = df['Total Sales'].pct_change() * 100

# Apply discount
if roll_number % 2 == 0:
  df['Electronics'] *= 0.9  # 10% discount on Electronics
else:
    df['Clothing'] *= 0.85  # 15% discount on Clothing

print("\nUpdated DataFrame with Discounts:")
print(df.head())

# Part III: Visualizations

# Line plot for sales trends
plt.figure(figsize=(10,6))
df[categories].plot(marker='o')
plt.title("Monthly Sales Trends")
plt.xlabel("Month")
plt.ylabel("Sales Units")
plt.legend(title="Categories")
plt.grid()
plt.show()

# Box plot for sales distribution
plt.figure(figsize=(8,6))
sns.boxplot(data=df[categories])
plt.title("Sales Distribution by Category")
plt.ylabel("Sales Units")
plt.grid()
plt.show()

# Q2: Array Operations
array = np.array([[1, -2, 3], [-4, 5, -6]])

# i. Element-wise absolute value
abs_array = np.abs(array)
print("\nAbsolute Values:")
print(abs_array)

# ii. Percentiles
percentiles = np.percentile(array, [25, 50, 75], axis=None)  # Flattened
percentiles_col = np.percentile(array, [25, 50, 75], axis=0)  # Column-wise
percentiles_row = np.percentile(array, [25, 50, 75], axis=1)  # Row-wise
print("\nPercentiles (Flattened, Column-wise, Row-wise):")
print(percentiles, percentiles_col, percentiles_row)

# iii. Mean, Median, and Std Dev
mean = np.mean(array)
median = np.median(array)
std_dev = np.std(array)
print("\nMean, Median, Standard Deviation:")
print(mean, median, std_dev)

# Q3: Floor, Ceiling, Truncate, and Round
arr = np.array([-1.8, -1.6, -0.5, 0.5, 1.6, 1.8, 3.0])
floor_values = np.floor(arr)
ceil_values = np.ceil(arr)
trunc_values = np.trunc(arr)
rounded_values = np.round(arr)
print("\nFloor, Ceiling, Truncate, Rounded:")
print(floor_values, ceil_values, trunc_values, rounded_values)

# Q4: Swap elements in list using temporary variable
def swap_list_elements(lst, i, j):
    temp = lst[i]
    lst[i] = lst[j]
    lst[j] = temp
    return lst

lst = [1, 2, 3, 4]
print("\nSwapped List:", swap_list_elements(lst, 1, 3))

# Q5: Swap elements in set by converting to list
def swap_set_elements(s, a, b):
    lst = list(s)
    if a in lst and b in lst:
        i, j = lst.index(a), lst.index(b)
        lst[i], lst[j] = lst[j], lst[i]
    return set(lst)

s = {10, 20, 30, 40}
print("\nSwapped Set:", swap_set_elements(s, 20, 40))